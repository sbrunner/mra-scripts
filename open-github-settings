#!/usr/bin/env python3


import os
import subprocess

import multi_repo_automation as mra

# if os.path.exists(".github/renovate.json5"):
# if mra.run(["grep", "text", ".github/renovate.json5"], exit_on_error=False).returncode != 0: # not found
# if mra.git_grep(r"\<text\>"]): # found
# if mra.run(["git", "ls-files", "**/*.txt"], stdout=subprocess.PIPE).stdout.strip() != b"": # found
# mra.edit("file")
# input()


def _do() -> None:
    assert False
    if os.path.exists("pyproject.toml"):
        work = False
        try:
            subprocess.run(["poetry", "--version"], check=True)
            work = True
        finally:
            if not work:
                mra.edit(["pyproject.toml"])


#    mra.run([mra.get_browser(), f"https://github.com/{mra.get_repo_config()['name']}/settings/actions"])


if __name__ == "__main__":
    mra.main(
        _do,
        # pull_request_on_stabilization_branches
        # pull_request_title
        # pull_request_body
        # branch
        # pull_request_branch_prefix
        config={
            "branch": "fix-changelog",
            "pull_request_title": "Fix the release creation in the changelog workflow",
            "pull_request_body": "",
        },
    )
