name: Continuous integration

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

permissions:
  contents: write
  id-token: write

jobs:
  pre-commit:
    name: Pre-commit
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - uses: actions/checkout@v5

      - name: GitHub event
        run: echo ${GITHUB_EVENT} | python3 -m json.tool
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: pip install --requirement=.github/requirements.txt

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
            pre-commit-
      - run: pre-commit run --all-files --color=always
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch; git diff --color; git reset --hard || true
        if: failure()

      - uses: actions/upload-artifact@v4
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()

      - run: touch PRE_COMMIT_SUCCESS
      - uses: actions/upload-artifact@v4
        with:
          name: PRE_COMMIT_SUCCESS
          path: PRE_COMMIT_SUCCESS
          retention-days: 1

  build:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: always() && !startsWith(github.event.head_commit.message, '[skip ci] ')
    needs: pre-commit

    steps:
      - uses: actions/checkout@v5

      - name: GitHub event
        run: echo ${GITHUB_EVENT} | python3 -m json.tool
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
      - run: pip install --requirement=.github/requirements.txt

      - run: poetry install
      - run: poetry run prospector --output-format=pylint

      # To make the workflow fail if the pre-commit hook failed
      - uses: actions/download-artifact@v5
        with:
          name: PRE_COMMIT_SUCCESS
