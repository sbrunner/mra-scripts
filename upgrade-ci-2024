#!/usr/bin/env python3

# TODO:
# remove poetry-check in pre-commit
# remove renoveta check  https://github.com/python-jsonschema/check-jsonschema
# prospector on pre-commit => ruff

import glob
import os
import re
import subprocess
from typing import Any, AnyStr, NamedTuple, Optional, Union

import multi_repo_automation as mra
import ruamel.yaml.comments
import ruamel.yaml.scalarstring
import tomlkit.items
import yaml as py_yaml
from packaging import version

# if os.path.exists(".github/renovate.json5"):
# if mra.run(["grep", "text", ".github/renovate.json5"], exit_on_error=False).returncode != 0: # not found
# if mra.git_grep(r"\<text\>"]): # found
# if mra.run(["git", "ls-files", "**/*.txt"], stdout=subprocess.PIPE).stdout.strip() != b"": # found
# mra.edit("file")
# input()

_VERSIONS = {}
with open(Path(__file__).parent / "versions.yaml", encoding="utf-8") as f:
    _VERSIONS = py_yaml.load(f, Loader=py_yaml.SafeLoader)


class Config:
    _values: dict[str, Any] = {}
    _enabled: list[str] = []
    _disabled: list[str] = []

    def __init__(self) -> None:
        self.repo = mra.get_repo_config()
        self.arguments = mra.get_arguments()

        if os.path.exists(".github/ci-upgrade.yaml"):
            with open(".github/ci-upgrade.yaml", encoding="utf-8") as f:
                upgrade_config = py_yaml.load(f.read(), Loader=py_yaml.SafeLoader)
                self._values = upgrade_config.get("values", {})
                self._enabled = upgrade_config.get("enabled", [])
                self._disabled = upgrade_config.get("disabled", [])

    def value(self, name: str, default: Any = None) -> Any:
        return self._values.get(name, default)

    def enabled(self, name: str, default: bool) -> bool:
        if name in self._enabled:
            return True
        if name in self._disabled:
            return False
        return default


class TaskEnv(NamedTuple):
    c2cciutils_version: version.Version
    set_c2cciutils_version: bool
    use_python: bool
    # min_python_version: str
    # max_python_version: str
    use_pypi: bool
    use_docker: bool
    use_helm: bool
    has_config: bool
    has_stabilization_branches: bool
    on_stabilization_branches: bool
    stabilization_branches: list[str]
    gopass: bool
    token: str
    config: Config


def _order_keys(
    data: dict[str, Any], first_keys: list[str], last_keys: Optional[list[str]] = None
) -> ruamel.yaml.comments.CommentedMap:
    if last_keys is None:
        last_keys = []

    # use order: <first_keys>, <other>, <last_keys>
    new_data = []
    for key in first_keys:
        if key in data:
            new_data.append((key, data[key]))

    new_data += [e for e in data.items() if e[0] not in [*first_keys, *last_keys]]

    for key in last_keys:
        if key in data:
            new_data.append((key, data[key]))

    return ruamel.yaml.comments.CommentedMap(new_data)


def _order_sub_keys(
    data: Union[dict[str, dict[str, Any]], list[dict[str, AnyStr]]],
    first_keys: list[str],
    last_keys: Optional[list[str]] = None,
) -> None:
    items = data.items() if isinstance(data, dict) else enumerate(data)
    for key, value in items:
        # copy the last comment
        comment = None
        if hasattr(value, "ca"):
            last_value = list(value.values())[-1]
            if isinstance(last_value, dict) and hasattr(last_value, "ca"):
                last_last_key = list(last_value.keys())[-1]
                comment = last_value.ca.items.get(last_last_key)
                if comment is not None:
                    del last_value.ca.items[last_last_key]
            else:
                comment = value.ca.items.get(list(value.keys())[-1])
        data[key] = _order_keys(value, first_keys, last_keys)
        if comment is not None:
            last_key = list(data[key].keys())[-1]
            if isinstance(data[key][last_key], ruamel.yaml.comments.CommentedMap):
                last_last_key = list(data[key][last_key].keys())[-1]
                data[key][last_key].ca.items[last_last_key] = comment
            else:
                data[key].ca.items[last_key] = comment


def _canonicalize_workflow(workflow: mra.EditYAML) -> None:
    workflow.data = _order_keys(
        workflow.data, ["name", "on", "permissions", "env"], ["jobs"]
    )

    # Add space after simple key
    for key in ["name"]:
        workflow.data.ca.items[key] = [
            None,
            None,
            ruamel.yaml.CommentToken("\n\n", ruamel.yaml.error.CommentMark(0), None),
            None,
        ]

    # add space after complex keys
    for key in ["on", "permissions", "env", "jobs"]:
        workflow.data.ca.items[key] = [
            None,
            [ruamel.yaml.CommentToken("\n", ruamel.yaml.error.CommentMark(0), None)],
            None,
            None,
        ]

    for name, job in workflow["jobs"].items():
        job = _order_keys(
            job,
            ["name", "runs-on", "timeout-minutes", "if", "concurrency", "needs"],
            ["strategy", "env", "steps"],
        )
        workflow["jobs"][name] = job

        for key in reversed(
            ["name", "runs-on", "timeout-minutes", "if", "concurrency", "needs"]
        ):
            if key in job:
                job.ca.items[key] = [
                    None,
                    None,
                    ruamel.yaml.CommentToken(
                        "\n\n", ruamel.yaml.error.CommentMark(0), None
                    ),
                    None,
                ]
                break

        for key in reversed(["strategy", "env"]):
            if key in job:
                job.ca.items[key] = [
                    None,
                    None,
                    ruamel.yaml.CommentToken(
                        "\n\n", ruamel.yaml.error.CommentMark(0), None
                    ),
                    None,
                ]

        for job in workflow["jobs"].values():
            if "steps" in job:
                _order_sub_keys(
                    job["steps"], ["name"], ["uses", "with", "run", "env", "if"]
                )


def _create_labels(task_env: TaskEnv) -> None:
    mra.gh(
        "label",
        "create",
        "--force",
        "dependencies",
        "--color=0075ca",
        "--description=Update the dependencies",
    )
    if task_env.config.enabled("pullRequestWelcome", False):
        mra.gh(
            "label",
            "create",
            "--force",
            "pull request welcome",
            "--color=6622BB",
            "--description=A pull request is welcome to fix this issue",
        )


def _set_schema_config(task_env: TaskEnv) -> None:
    for config_filename, schema_url in (
        (
            "ci/config.yaml",
            f"https://raw.githubusercontent.com/camptocamp/c2cciutils/{task_env.c2cciutils_version}/c2cciutils/schema.json",
        ),
        (
            "ci/tag-publish.yaml",
            "https://raw.githubusercontent.com/camptocamp/tag-publish/0.8.2/tag_publish/schema.json",
        ),
        ("ci/ghci.yaml", "https://geoservices-int.camptocamp.com/github/schema.json"),
        (
            "jsonschema-gentypes.yaml",
            "https://raw.githubusercontent.com/sbrunner/jsonschema-gentypes/1.8.1/jsonschema_gentypes/schema.json",
        ),
    ):
        if os.path.exists(config_filename):
            with mra.Edit(config_filename) as config:
                data = config.data.split("\n")
                if data[0].startswith("# yaml-language-server: $schema="):
                    continue

                data = [
                    f"# yaml-language-server: $schema={schema_url}",
                    "",
                    *data,
                ]

                config.data = "\n".join(data)


def _upgrade_ubuntu(task_env: TaskEnv) -> None:
    del task_env

    for workflow_file in mra.run(
        ["git", "ls-files", ".github/workflows/*.yaml"], stdout=subprocess.PIPE
    ).stdout.split("\n"):
        if workflow_file:
            try:
                with mra.EditYAML(workflow_file) as yaml:
                    for job in yaml.get("jobs", {}).values():
                        if job.get("runs-on", "").startswith("ubuntu-"):
                            job["runs-on"] = "ubuntu-22.04"
            except Exception as e:
                print(f"Error in {workflow_file}: {e}")


def _update_workflow_venv(task_env: TaskEnv, yaml: mra.EditYAML) -> None:
    # Update for Python 3.12
    # pip install match
    pip_install_re = re.compile(r"\bpip install\b")
    for job in yaml["jobs"].values():
        setup_index = -1
        install_index = -1
        echo_index = -1
        for index, step in enumerate(job["steps"]):
            if "pip install " in step.get("run", "") and " --user " in step.get(
                "run", ""
            ):
                step["run"] = step["run"].replace(" --user ", " ")
            if install_index < 0 and pip_install_re.search(step.get("run", "")):
                install_index = index
            if setup_index < 0 and step.get("uses", "").startswith(
                "actions/setup-python@"
            ):
                setup_index = index
            if (
                echo_index < 0
                and step.get("run", "") == 'echo "${HOME}/.local/bin" >> ${GITHUB_PATH}'
            ):
                echo_index = index
        if install_index >= 0 and setup_index < 0:
            job["steps"].insert(
                install_index,
                {
                    "uses": "actions/setup-python@v5",
                    "with": {
                        "python-version": _VERSIONS["python"],
                    },
                },
            )
        if echo_index >= 0:
            del job["steps"][echo_index]


def _update_main_workflow(task_env: TaskEnv) -> None:
    if os.path.exists(".github/workflows/codeql.yaml"):
        os.remove(".github/workflows/codeql.yaml")
    if not os.path.exists(".github/workflows/main.yaml") and os.path.exists(
        ".github/workflows/ci.yaml"
    ):
        os.rename(".github/workflows/ci.yaml", ".github/workflows/main.yaml")
    if os.path.exists(".github/workflows/main.yaml"):
        with mra.EditYAML(".github/workflows/main.yaml") as yaml:
            _update_workflow_venv(task_env, yaml)

            for job in yaml["jobs"].values():
                pre_commit_index = -1
                has_pre_commit_artifacts = False
                publish_index = -1
                tag_publish_index = -1
                has_publish_artifacts = False
                for index, step in enumerate(job["steps"]):
                    if step.get("run", "").startswith("pre-commit run"):
                        if step["run"] == "pre-commit run --all-files":
                            step["run"] = "pre-commit run --all-files --color=always"
                        pre_commit_index = index
                    if step.get("run", "").startswith("c2cciutils-publish"):
                        publish_index = index
                    if step.get("run", "").startswith("tag-publish"):
                        tag_publish_index = index
                    if (
                        step.get("uses", "").startswith("actions/upload-artifact@")
                        and step.get("with", {}).get("name", "")
                        == "Apply pre-commit fix.patch"
                    ):
                        has_pre_commit_artifacts = True
                    if (
                        step.get("uses", "").startswith("actions/upload-artifact@")
                        and step.get("with", {}).get("name", "")
                        == "Update dpkg versions list.patch"
                    ):
                        has_publish_artifacts = True

                index_add = 0
                for index, filename, has_artifact, artifact_name in (
                    (
                        pre_commit_index,
                        "pre-commit",
                        has_pre_commit_artifacts,
                        "Apply pre-commit fix",
                    ),
                    (
                        publish_index,
                        "dpkg-versions",
                        has_publish_artifacts,
                        "Update dpkg versions list",
                    ),
                    (
                        tag_publish_index,
                        "dpkg-versions",
                        has_publish_artifacts,
                        "Update dpkg versions list",
                    ),
                ):
                    if index >= 0:
                        if not task_env.on_stabilization_branches:
                            if (
                                job["steps"][index + index_add]
                                .get("env", {})
                                .get("SKIP", "")
                                .strip(",")
                                == "poetry-lock"
                            ):
                                del job["steps"][index + index_add]["env"]["SKIP"]
                                if not job["steps"][index + index_add]["env"]:
                                    del job["steps"][index + index_add]["env"]
                        if len(job["steps"]) > index + index_add + 1 and job["steps"][
                            index + index_add + 1
                        ].get("run", "").startswith("git diff"):
                            job["steps"][index + index_add + 1][
                                "run"
                            ] = f"git diff --exit-code --patch > /tmp/{filename}.patch; git diff --color; git reset --hard || true"
                            job["steps"][index + index_add + 1]["if"] = "failure()"
                        else:
                            job["steps"].insert(
                                index + index_add + 1,
                                {
                                    "run": f"git diff --exit-code --patch > /tmp/{filename}.patch || true",
                                    "if": "failure()",
                                },
                            )
                            index_add += 1
                        if not has_artifact and index >= 0:
                            job["steps"].insert(
                                index + index_add + 1,
                                {
                                    "uses": "actions/upload-artifact@v4",
                                    "with": {
                                        "name": f"{artifact_name}.patch",
                                        "path": f"/tmp/{filename}.patch",
                                        "retention-days": 1,
                                    },
                                    "if": "failure()",
                                },
                            )
                            index_add += 1

                publish_index = -1

                for index, step in enumerate(job["steps"]):
                    if not task_env.on_stabilization_branches:
                        if task_env.c2cciutils_version >= version.parse("1.6.0"):
                            if step.get("run", "") == "c2cciutils-checks":
                                step["name"] = "Print environment information"
                                step["run"] = "c2cciutils-env"
                                value = None
                                if "env" in step:
                                    if step["env"].ca.items:
                                        value = list(step["env"].ca.items.values())[-1][
                                            2
                                        ].value
                                    del step["env"]
                                step["env"] = {"GITHUB_EVENT": "${{ toJson(github) }}"}
                                job["steps"].ca.items[index] = [
                                    None,
                                    None,
                                    [
                                        ruamel.yaml.CommentToken(
                                            value or "\n\n",
                                            ruamel.yaml.error.CommentMark(0),
                                            None,
                                        )
                                    ],
                                    None,
                                ]
                        else:
                            if step.get("run", "") == "c2cciutils-checks":
                                if not task_env.gopass:
                                    env = step.setdefault("env", {})
                                    env["SNYK_TOKEN"] = (  # nosec
                                        "${{ secrets.SNYK_TOKEN }}"
                                    )

            if not task_env.on_stabilization_branches or yaml.is_modified():
                _canonicalize_workflow(yaml)


def _update_audit_workflow(task_env: TaskEnv) -> None:
    if os.path.exists(".github/workflows/audit.yaml"):
        os.remove(".github/workflows/audit.yaml")


def _update_changelog_workflow(task_env: TaskEnv) -> None:
    if os.path.exists(".github/changelog-config.yaml"):
        os.remove(".github/changelog-config.yaml")
    if os.path.exists(".github/workflows/changelog.yaml"):
        os.remove(".github/workflows/changelog.yaml")
    if os.path.exists(".github/run-changelog.mjs"):
        os.remove(".github/run-changelog.mjs")


def _update_clean_workflow(task_env: TaskEnv) -> None:
    if not task_env.use_docker:
        if os.path.exists(".github/workflows/clean.yaml"):
            os.remove(".github/workflows/clean.yaml")
        return
    if os.path.exists(".github/workflows/clean.yaml"):
        with mra.EditYAML(".github/workflows/clean.yaml") as yaml:
            _update_workflow_venv(task_env, yaml)


def _update_delete_old_workflows_run_workflow(task_env: TaskEnv) -> None:
    if os.path.exists(".github/workflows/delete-old-workflow-run.yaml"):
        os.remove(".github/workflows/delete-old-workflow-run.yaml")
    if os.path.exists(".github/workflows/delete-old-workflows-run.yaml"):
        os.remove(".github/workflows/delete-old-workflows-run.yaml")


def safe_or(elements: list[str], prefix: str = "") -> str:
    if len(elements) == 0:
        return ""
    if len(elements) == 1:
        return elements[0]
    return "(" + f"\n{prefix}|| ".join(elements) + ")"


def _and(elements: list[str], prefix: str = "") -> str:
    elements = [e for e in elements if e]
    if len(elements) == 0:
        return ""
    return f"\n{prefix}&& ".join(elements)


def _update_pull_request_automation_workflow(task_env: TaskEnv) -> None:
    for file_ in (
        ".github/workflows/dependabot-auto-merge.yaml",
        ".github/workflows/auto-review.yaml",
        ".github/workflows/auto-merge.yaml",
        ".github/workflows/dependency-update-review.yaml",
        ".github/workflows/dependency-auto-review.yaml",
    ):
        if os.path.exists(file_):
            if os.path.exists(".github/workflows/pull-request-automation.yaml"):
                os.remove(file_)
            else:
                mra.run(
                    [
                        "git",
                        "mv",
                        file_,
                        ".github/workflows/pull-request-automation.yaml",
                    ]
                )
    if not os.path.exists(".github/workflows/pull-request-automation.yaml"):
        with mra.Edit(".github/workflows/pull-request-automation.yaml") as text:
            text.data = "\n".join(
                [
                    "name: Auto reviews updates",
                    "",
                    "on:",
                    "  pull_request:",
                    "    types:",
                    "      - opened",
                    "      - reopened",
                    "",
                    "jobs:",
                    "  auto-merge:",
                    "    name: Auto reviews updates",
                    "    runs-on: ubuntu-22.04",
                    "    timeout-minutes: 5",
                    "",
                    "    steps:",
                    "      - uses: actions/github-script@v7",
                    "        with:",
                    "          script: |-",
                    "            github.rest.pulls.createReview({",
                    "              owner: context.repo.owner,",
                    "              repo: context.repo.repo,",
                    "              pull_number: context.payload.pull_request.number,",
                    "              event: 'APPROVE',",
                    "            })",
                    "    if: github.event.pull_request.user.login == 'renovate[bot]'",
                ]
            )
    with mra.EditYAML(".github/workflows/pull-request-automation.yaml") as yaml:
        task_env.config.value("dependencyAutoReviewUsers", ["renovate[bot]"])
        yaml["name"] = "Auto reviews pull requests from bots"
        yaml["on"] = {
            "pull_request": {"types": ["opened", "reopened"]},
        }
        yaml["name"] = "Auto reviews, merge and close pull requests"
        for job in yaml["jobs"].values():
            job["name"] = "Auto reviews pull requests from bots"
            if "if" in job:
                del job["if"]

            PRINT_EVENT = "Print event"
            PRINT_CONTEXT = "Print context"
            AUTO_REVIEW_GHCI_UPDATES = "Auto reviews GHCI updates"
            AUTO_REVIEW_RENOVATE_UPDATES = "Auto reviews Renovate updates"
            AUTO_REVIEW_AND_MERGE_DPKG_UPDATES = "Auto review and merge dpkg updates"
            AUTO_REVIEW_AND_MERGE_SNYK_AUTO_FIX = "Auto review and merge snyk auto fix"
            step_names = [
                PRINT_EVENT,
                PRINT_CONTEXT,
                AUTO_REVIEW_GHCI_UPDATES,
                AUTO_REVIEW_RENOVATE_UPDATES,
            ]

            old_step = {}
            for new_step_name in step_names:
                for step in job["steps"]:
                    if step.get("name") == new_step_name:
                        old_step[new_step_name] = step
                        break

            job["steps"] = [old_step.get(step, {"name": step}) for step in step_names]

            auto_review_and_merge_snyk_auto_fix_index = -1
            for index, step in enumerate(job["steps"]):
                if step["name"] == AUTO_REVIEW_AND_MERGE_SNYK_AUTO_FIX:
                    auto_review_and_merge_snyk_auto_fix_index = index
            if auto_review_and_merge_snyk_auto_fix_index >= 0:
                del job["steps"][auto_review_and_merge_snyk_auto_fix_index]

            auto_review_and_merge_dpkg_update_index = -1
            for index, step in enumerate(job["steps"]):
                if step["name"] == AUTO_REVIEW_AND_MERGE_DPKG_UPDATES:
                    auto_review_and_merge_dpkg_update_index = index
            if auto_review_and_merge_dpkg_update_index >= 0:
                del job["steps"][auto_review_and_merge_dpkg_update_index]

            for step in job["steps"]:
                if step["name"] == PRINT_EVENT:
                    step["run"] = 'echo "${GITHUB}" | jq'
                    step["env"] = {
                        "GITHUB": "${{ toJson(github) }}",
                    }
                if step["name"] == PRINT_CONTEXT:
                    if not step.get("uses", "").startswith("actions/github-script@"):
                        step["uses"] = "actions/github-script@v7"
                    step["with"] = {
                        "script": ruamel.yaml.scalarstring.LiteralScalarString(
                            "\n".join(["console.log(context);"])
                        )
                    }
                    if "if" in step:
                        del step["if"]
                    if "env" in step:
                        del step["env"]
                if step["name"] == AUTO_REVIEW_GHCI_UPDATES:
                    if not step.get("uses", "").startswith("actions/github-script@"):
                        step["uses"] = "actions/github-script@v7"
                    step["if"] = ruamel.yaml.scalarstring.LiteralScalarString(
                        _and(
                            [
                                "startsWith(github.head_ref, 'ghci/audit/')",
                                safe_or(
                                    [
                                        f"github.event.pull_request.user.login == 'geo-ghci-test[bot]'",
                                        f"github.event.pull_request.user.login == 'geo-ghci-int[bot]'",
                                        f"github.event.pull_request.user.login == 'geo-ghci[bot]'",
                                    ],
                                    "  ",
                                ),
                            ]
                        )
                    )
                    step["with"] = {
                        "script": ruamel.yaml.scalarstring.LiteralScalarString(
                            "\n".join(
                                [
                                    "github.rest.pulls.createReview({",
                                    "  owner: context.repo.owner,",
                                    "  repo: context.repo.repo,",
                                    "  pull_number: context.payload.pull_request.number,",
                                    "  event: 'APPROVE',",
                                    "})",
                                ]
                            )
                        )
                    }
                if step["name"] == AUTO_REVIEW_RENOVATE_UPDATES:
                    if not step.get("uses", "").startswith("actions/github-script@"):
                        step["uses"] = "actions/github-script@v7"
                    step["if"] = ruamel.yaml.scalarstring.LiteralScalarString(
                        f"github.event.pull_request.user.login == 'renovate[bot]'",
                    )
                    step["with"] = {
                        "script": ruamel.yaml.scalarstring.LiteralScalarString(
                            "\n".join(
                                [
                                    "github.rest.pulls.createReview({",
                                    "  owner: context.repo.owner,",
                                    "  repo: context.repo.repo,",
                                    "  pull_number: context.payload.pull_request.number,",
                                    "  event: 'APPROVE',",
                                    "})",
                                ]
                            )
                        )
                    }
                auto_review_merge_script = "\n".join(
                    [
                        "github.rest.pulls.createReview({",
                        "  owner: context.repo.owner,",
                        "  repo: context.repo.repo,",
                        "  pull_number: context.payload.pull_request.number,",
                        "  event: 'APPROVE',",
                        "});",
                        "github.graphql(`",
                        "  mutation {",
                        "    enablePullRequestAutoMerge(input: {",
                        '      pullRequestId: "${context.payload.pull_request.node_id}",',
                        "      mergeMethod: SQUASH,",
                        "    }) {",
                        "      pullRequest {",
                        "        autoMergeRequest {",
                        "          enabledAt",
                        "        }",
                        "      }",
                        "    }",
                        "  }",
                        "`)",
                    ]
                )

        if not task_env.on_stabilization_branches or yaml.is_modified():
            _canonicalize_workflow(yaml)


def _update_pull_request_checks_workflow(task_env: TaskEnv) -> None:
    if os.path.exists(".github/workflows/pr-checks.yaml"):
        os.remove(".github/workflows/pr-checks.yaml")
    if os.path.exists(".github/workflows/test_url.yaml"):
        os.remove(".github/workflows/test_url.yaml")


def _update_backport_workflow(task_env: TaskEnv) -> None:
    if not task_env.has_stabilization_branches:
        if os.path.exists(".github/workflows/backport.yaml"):
            os.remove(".github/workflows/backport.yaml")
        return


class _PythonVersion:
    def __init__(self, version: str) -> None:
        version_split = version.split(".")
        self.major = int(version_split[0])
        self.minor = int(version_split[1])


def _update_pyproject_toml(task_env: TaskEnv) -> None:
    """
    Add or update the Poetry extensions to the pyproject.toml file.
    """

    poetry_version = version.parse("0.0.0")
    for requirements_file_name in ("requirements.txt", "ci/requirements.txt"):
        if os.path.exists(requirements_file_name):
            with mra.Edit(requirements_file_name) as requirements_txt:
                for line in requirements_txt.data.splitlines():
                    if line.startswith("poetry=="):
                        poetry_version = version.parse(line.split("==")[1])
                        break

    if poetry_version >= version.parse("1.3.0"):
        typed = (
            len(
                mra.run(
                    ["git", "ls-files", "py.typed"],
                    exit_on_error=False,
                    stdout=subprocess.PIPE,
                    encoding="utf-8",
                ).stdout.strip()
            )
            > 0
        )
        for pyproject_filename in (
            "pyproject.toml",
            "app/pyproject.toml",
            "api/pyproject.toml",
        ):
            if os.path.exists(pyproject_filename):
                with mra.EditTOML(pyproject_filename) as pyproject:
                    if "requires" in pyproject.get(
                        "build-system", {}
                    ) and "python" in pyproject.get("tool", {}).get("poetry", {}).get(
                        "dependencies", {}
                    ):
                        classifiers = (
                            pyproject.setdefault("tool", {})
                            .setdefault("poetry", {})
                            .setdefault("classifiers", [])
                        )
                        if typed and "Typing :: Typed" not in classifiers:
                            classifiers.append("Typing :: Typed")
                        # if task_env.min_python_version and task_env.max_python_version:
                        #    min_python_version = _PythonVersion(task_env.min_python_version)
                        #    max_python_version = _PythonVersion(task_env.max_python_version)
                        #    classifiers = [c for c in classifiers if not c.startswith("Programming Language :: Python")]
                        #    classifiers.append("Programming Language :: Python")
                        #    classifiers.append("Programming Language :: Python :: 3")
                        #    for minor in range(min_python_version.minor, max_python_version.minor + 1):
                        #        classifiers.append(f"Programming Language :: Python :: {min_python_version.major}.{minor}")
                        pyproject["tool"]["poetry"]["classifiers"] = sorted(classifiers)

                        version_splitter = re.compile("[<>=]+")
                        [
                            version_splitter.split(p)[0]
                            for p in pyproject["build-system"]["requires"]
                        ]
                        for requirements_file_name_candidate in (
                            "requirements.txt",
                            "ci/requirements.txt",
                        ):
                            if os.path.exists(requirements_file_name_candidate):
                                with mra.Edit(
                                    requirements_file_name_candidate
                                ) as requirements_txt:
                                    if "poetry" in requirements_txt.data:
                                        break
                        # for dependency, plugin, plugin_version in (
                        #     (True, "poetry-dynamic-versioning", "1.1.0"),
                        #     (True, "poetry-plugin-tweak-dependencies-version", "1.5.2"),
                        #     (True, "poetry-plugin-drop-python-upper-constraint", "0.1.0"),
                        #     (False, "poetry-plugin-export", "1.6.0"),
                        # ):
                        #     requirement = not dependency
                        #     if dependency and plugin not in build_system_requires_no_version:
                        #         pyproject.data["build-system"]["requires"].append(plugin)
                        #         requirement = True
                        #     if requirement and requirement_file_name:
                        #         with mra.Edit(requirements_file_name) as requirements_txt:
                        #                     if (
                        #                         f"{plugin}==" not in requirements_txt.data
                        #                         and f"{plugin}[" not in requirements_txt.data
                        #                     ):
                        #                         requirements_txt.data += f"{plugin}=={plugin_version}\n"

                        poetry_dynamic_versioning = pyproject.setdefault(
                            "tool", {}
                        ).setdefault("poetry-dynamic-versioning", {})
                        poetry_dynamic_versioning.setdefault("enable", True)
                        poetry_dynamic_versioning.setdefault("vcs", "git")
                        poetry_dynamic_versioning.setdefault(
                            "pattern", "^(?P<base>\\d+(\\.\\d+)*)"
                        )
                        if "style" in poetry_dynamic_versioning:
                            del poetry_dynamic_versioning["style"]
                        poetry_dynamic_versioning["format-jinja"] = (
                            tomlkit.items.String.from_raw(
                                "\n".join(
                                    [
                                        "",
                                        '{%- if env.get("VERSION_TYPE") == "version_branch" -%}',
                                        '{{serialize_pep440(bump_version(base, 1 if env.get("IS_MASTER") == "TRUE" else 2), dev=distance)}}',
                                        "{%- elif distance == 0 -%}",
                                        "{{serialize_pep440(base)}}",
                                        "{%- else -%}",
                                        "{{serialize_pep440(bump_version(base), dev=distance)}}",
                                        "{%- endif -%}",
                                        "",
                                    ]
                                ),
                                tomlkit.items.StringType.MLB,
                            )
                        )
                        poetry_plugin_tweak_dependencies_version = pyproject.setdefault(
                            "tool", {}
                        ).setdefault("poetry-plugin-tweak-dependencies-version", {})
                        poetry_plugin_tweak_dependencies_version.setdefault(
                            "default", "present"
                        )

                        pyproject.setdefault("tool", {}).setdefault(
                            "ruff", {}
                        ).setdefault("line-length", 110)
                        pyproject.setdefault("tool", {}).setdefault(
                            "ruff", {}
                        ).setdefault("target-version", "py310")
                        pyproject["tool"]["ruff"].setdefault("lint", {}).setdefault(
                            "pydocstyle", {}
                        ).setdefault("convention", "numpy")
                        for rm_tool in ("mypy", "black", "isort"):
                            if rm_tool in pyproject["tool"]:
                                del pyproject["tool"][rm_tool]


def _update_prospector_config(task_env: TaskEnv) -> None:
    if os.path.exists("..whitesource"):
        os.remove("..whitesource")
    use_c2cwsiutils = (
        mra.run(
            ["git", "grep", "c2cwsgiutils"],
            exit_on_error=False,
            stdout=subprocess.DEVNULL,
        ).returncode
        == 0
    )
    for bandit_filename in mra.run(
        ["git", "ls-files", ".bandit.yaml"], stdout=subprocess.PIPE
    ).stdout.splitlines():
        if os.path.exists(bandit_filename):
            os.remove(bandit_filename)
    for prospector_filename in mra.run(
        ["git", "ls-files", ".prospector.yaml"], stdout=subprocess.PIPE
    ).stdout.splitlines():
        with mra.EditYAML(prospector_filename) as prospector_config:
            if "bandit" in prospector_config:
                del prospector_config["bandit"]
            if "utils:base" in prospector_config.get("inherits", []):
                for inherit in (
                    "utils:fix",
                    "utils:unsafe",
                    *(["utils:c2cwsgiutils"] if use_c2cwsiutils else []),
                ):
                    if inherit not in prospector_config.get("inherits", []):
                        prospector_config["inherits"].append(inherit)

            # if task_env.min_python_version:
            #    prospector_config.setdefault("mypy", {}).setdefault("options", {}).setdefault("python_version", task_env.min_python_version)


# def _update_python_version(task_env: TaskEnv) -> None:
#    if task_env.min_python_version:
#        if os.exists("jsonschema-gentypes.yaml"):
#            with mra.Edit("jsonschema-gentypes.yaml") as jsonschema_gentypes:
#                jsonschema_gentypes['python_version'] = task_env.min_python_version


def _update_renovate_config(task_env: TaskEnv) -> None:
    if not os.path.exists(".github/renovate.json5"):
        with mra.Edit(".github/renovate.json5") as renovate_config:
            renovate_config.data = "{}"

    upgrade_required = False
    with mra.EditRenovateConfigV2() as renovate_config:
        if "regexManagers" in renovate_config:
            upgrade_required = True

    if upgrade_required:
        with mra.Edit(".github/renovate.json5") as renovate_config:
            renovate_config.data = renovate_config.data.replace(
                "regexManagers", "customManagers"
            )
        with mra.EditRenovateConfigV2() as renovate_config:
            for custom_manager in renovate_config["customManagers"]:
                custom_manager["customType"] = "regex"

    with mra.EditRenovateConfigV2() as renovate_config:
        # matchPackagePrefixes => matchPackageNames
        for package_rule in renovate_config["packageRules"]:
            if "matchPackagePrefixes" in package_rule:
                package_rule["matchPackageNames"] = [
                    f"/^{re.escape(prefix)}.*/"
                    for prefix in package_rule["matchPackagePrefixes"]
                ]
                del package_rule["matchPackagePrefixes"]

        renovate_config["extends"] = [
            "github>camptocamp/gs-renovate-config-preset:base.json5#"
            + _VERSIONS["camptocamp/gs-renovate-config-preset"],
            "github>camptocamp/gs-renovate-config-preset:ci.json5#"
            + _VERSIONS["camptocamp/gs-renovate-config-preset"],
            "github>camptocamp/gs-renovate-config-preset:pre-commit.json5#"
            + _VERSIONS["camptocamp/gs-renovate-config-preset"],
            "github>camptocamp/gs-renovate-config-preset:python.json5#"
            + _VERSIONS["camptocamp/gs-renovate-config-preset"],
            "github>camptocamp/gs-renovate-config-preset:json-schema.json5#"
            + _VERSIONS["camptocamp/gs-renovate-config-preset"],
            "github>camptocamp/gs-renovate-config-preset:shellcheck.json5#"
            + _VERSIONS["camptocamp/gs-renovate-config-preset"],
        ]

        for property in (
            "timezone",
            "schedule",
            "labels",
            "separateMajorMinor",
            "separateMinorPatch",
            "prHourlyLimit",
            "prConcurrentLimit",
            "lockFileMaintenance",
        ):
            if property in renovate_config:
                del renovate_config[property]
        if "html" in renovate_config and (
            renovate_config["html"] == {"fileMatch": ["\\.html?$", "\\.html?.mako$"]}
            or renovate_config["html"] == {"fileMatch": ["\\.html?$"]}
            or renovate_config["html"] == {"fileMatch": ["\\.html?.mako$"]}
        ):
            del renovate_config["html"]

        renovate_config.remove_package_rule(
            {}, ["Group and auto merge the patch updates"]
        )
        renovate_config.remove_package_rule(
            {}, ["Group and auto merge the minor updates"]
        )

        # CI
        renovate_config.remove_package_rule({}, ["Group the dev dependency update"])
        renovate_config.remove_package_rule(
            {}, ["Group and auto merge the CI dependencies"]
        )

        # pre-commit
        if "pre-commit" in renovate_config:
            del renovate_config["pre-commit"]
        renovate_config.remove_regex_manager(
            {}, ["Do updates on pre-commit additional dependencies"]
        )

        # python
        renovate_config.remove_package_rule({}, ["Ungroup Python dependencies"])
        renovate_config.remove_regex_manager(
            {}, ["Python version in actions/setup-python action"]
        )
        renovate_config.remove_package_rule(
            {}, ["In file `.python-version`, use the `<major>.<minor>` version"]
        )

        # json-schema
        renovate_config.remove_regex_manager(
            {}, ["Do update on the schema present in the YAML files"]
        )

        # shellcheck
        renovate_config.remove_package_rule(
            {}, ["Support the 4 parts of shellcheck-py version with a v prefix"]
        )

        renovate_config.remove_package_rule({}, ["Update dpkg versions at any time"])
        if (
            not task_env.has_stabilization_branches
            or task_env.stabilization_branches == ["master"]
        ):
            if "baseBranches" in renovate_config:
                del renovate_config["baseBranches"]
            renovate_config.remove_package_rule(
                {}, ["Accept only the patch on stabilization branches"]
            )
            renovate_config.remove_package_rule(
                {}, ["Accept only the patch on the stabilization branches"]
            )

        renovate_config.remove_package_rule(
            {}, ["In file .python-version, use the <major>.<minor> version"]
        )
        if os.path.exists(".python-version"):
            renovate_config.add_package_rule(
                {
                    "matchFileNames": [".python-version"],
                    "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)$",
                },
                ["In file `.python-version`, use the `<major>.<minor>` version"],
            )


def _update_config(task_env: TaskEnv) -> None:
    if task_env.has_config and task_env.c2cciutils_version >= version.parse("1.6.0"):
        with mra.EditYAML("ci/config.yaml") as config:
            if "checks" in config:
                del config["checks"]
            to_delete = len(config.keys()) == 0
        if to_delete:
            os.remove("ci/config.yaml")

    if task_env.use_docker:
        if not os.path.exists("ci/dpkg-versions.yaml"):
            with open("ci/dpkg-versions.yaml", "w", encoding="utf-8") as dpkg_versions:
                dpkg_versions.write("{}")


def _update_pre_commit_config(task_env: TaskEnv) -> None:
    if os.path.exists(".pre-commit-config.yaml"):
        with mra.EditPreCommitConfig() as pre_commit_config:
            if "ci" in pre_commit_config:
                del pre_commit_config["ci"]

            pre_commit_config.add_repo(
                "https://github.com/renovatebot/pre-commit-hooks",
                _VERSIONS["renovatebot/pre-commit-hooks"],
            )
            pre_commit_config.add_hook(
                "https://github.com/renovatebot/pre-commit-hooks",
                {
                    "id": "renovate-config-validator",
                },
            )

            # Do a spell check on the found schemas
            schemas = []
            for files_ in ("*.schema.json", "schema.json", "schema-*.json"):
                schemas += [
                    f
                    for f in mra.run(
                        ["git", "ls-files", files_], stdout=subprocess.PIPE
                    ).stdout.split("\n")
                    if f
                ]
                # Get all the schemas files
                schemas += [
                    f
                    for f in mra.run(
                        ["git", "ls-files", f"**/{files_}"], stdout=subprocess.PIPE
                    ).stdout.split("\n")
                    if f
                ]

            if schemas:
                pre_commit_config.add_repo(
                    "https://github.com/mheap/json-schema-spell-checker",
                    _VERSIONS["mheap/json-schema-spell-checker"],
                )
                pre_commit_config.add_hook(
                    "https://github.com/mheap/json-schema-spell-checker",
                    {
                        "id": "json-schema-spell-checker",
                        "files": pre_commit_config.create_files_regex(
                            [re.escape(f) for f in schemas]
                        ),
                        "args": [
                            "--fields=description,title",
                            "--spelling=.github/spell-ignore-words.txt",
                            "--ignore-numbers",
                            "--ignore-acronyms",
                            "--en-us",
                        ],
                    },
                )

            if task_env.use_python:
                rm_repos = (
                    "https://github.com/psf/black",
                    "https://github.com/PyCQA/isort",
                    "https://github.com/PyCQA/autoflake",
                    "https://github.com/asottile/pyupgrade",
                )
                continue_ = True
                while continue_:
                    continue_ = False
                    for name, repo in enumerate(list(pre_commit_config["repos"])):
                        if repo["repo"] in rm_repos:
                            del pre_commit_config["repos"][name]
                            continue_ = True
                            break

                pre_commit_config.add_repo(
                    "https://github.com/astral-sh/ruff-pre-commit", "v0.7.2"
                )
                pre_commit_config.add_hook(
                    "https://github.com/astral-sh/ruff-pre-commit",
                    {"id": "ruff-format"},
                )
                pre_commit_config.add_repo(
                    "https://github.com/PyCQA/prospector", "v1.13.0"
                )
                pre_commit_config.add_hook(
                    "https://github.com/PyCQA/prospector",
                    {
                        "id": "prospector",
                    },
                )
                prospector_hook = pre_commit_config.repos_hooks[
                    "https://github.com/PyCQA/prospector"
                ]["hooks"]["prospector"]
                prospector_hook["args"] = [
                    "--tool=ruff",
                    "--die-on-tool-error",
                    "--output-format=pylint",
                ]
                if (
                    "prospector"
                    in pre_commit_config.repos_hooks[
                        "https://github.com/PyCQA/prospector"
                    ]["hooks"]
                ):
                    current_deps = [
                        deps.split("=")[0]
                        for deps in prospector_hook.get("additional_dependencies", [])
                    ]
                    for deps in [
                        "prospector-profile-duplicated==1.6.0",
                        "prospector-profile-utils==1.10.1",
                        "ruff==0.7.3",
                    ]:
                        if deps.split("=")[0] not in current_deps:
                            pre_commit_config.add_commented_additional_dependencies(
                                prospector_hook, [deps], "pypi"
                            )
                    pre_commit_config.repos_hooks[
                        "https://github.com/PyCQA/prospector"
                    ]["hooks"]["prospector"] = prospector_hook
                pre_commit_config.add_repo(
                    "https://github.com/sbrunner/python-versions-hook", "0.7.0"
                )
                pre_commit_config.add_hook(
                    "https://github.com/sbrunner/python-versions-hook",
                    {
                        "id": "python-versions",
                    },
                )
                sbrunner_repo_hooks = pre_commit_config.repos_hooks[
                    "https://github.com/sbrunner/hooks"
                ]["hooks"]
                for name, hook in list(sbrunner_repo_hooks.items()):
                    if hook["id"] == "poetry-check":
                        del sbrunner_repo_hooks[name]

                jsonschema_repo_hooks = pre_commit_config.repos_hooks[
                    "https://github.com/python-jsonschema/check-jsonschema"
                ]["hooks"]
                for name, hook in list(jsonschema_repo_hooks.items()):
                    if hook["id"] == "check-renovate":
                        del jsonschema_repo_hooks[name]


def _use_tag_publish(task_env: TaskEnv) -> None:
    if not os.path.exists(".github/workflows/main.yaml"):
        return

    add_tag_publish = False
    with mra.EditYAML(".github/workflows/main.yaml") as yaml:
        for job in yaml["jobs"].values():
            for step in job["steps"]:
                if step.get("run", "").startswith("tag-publish"):
                    add_tag_publish = True
                elif step.get("run", "").startswith("c2cciutils-publish"):
                    add_tag_publish = True
                    step["run"] = step["run"].replace(
                        "c2cciutils-publish", "tag-publish"
                    )
                    step.setdefault("env", {})[
                        "GITHUB_TOKEN"
                    ] = "${{ secrets.GITHUB_TOKEN }}"  # nosec

    if not add_tag_publish:
        return

    for candidate_requirements_filename in (
        ".github/requirements.txt",
        "ci/requirements.txt",
        "requirements.txt",
    ):
        if os.path.exists(candidate_requirements_filename):
            with mra.Edit(candidate_requirements_filename) as requirements_txt:
                if "c2cciutils" in requirements_txt.data:
                    if "tag-publish" not in requirements_txt.data:
                        requirements_txt.data += "tag-publish==0.8.2\n"
                    break


def _remove_docker_compose_version(task_env: TaskEnv) -> None:
    for docker_compose_filename in [
        *glob.glob("**/docker-compose.yaml"),
        *glob.glob("**/docker-compose.*.yaml"),
        *glob.glob("**/docker-compose-*.yaml"),
        *glob.glob("docker-compose.yaml"),
        *glob.glob("docker-compose.*.yaml"),
        *glob.glob("docker-compose-*.yaml"),
    ]:
        with mra.EditYAML(docker_compose_filename) as docker_compose:
            if "version" in docker_compose:
                del docker_compose["version"]


def _get_env() -> TaskEnv:
    config = Config()

    use_helm = config.enabled(
        "helm",
        os.path.exists("Chart.yaml") or os.path.exists("test/helmchart/Chart.yaml"),
    )

    gopass = config.enabled(
        "gopass",
        "no-gopass" not in config.repo.get("types", [])
        and (
            config.repo["name"].startswith("camptocamp/")
            or config.repo["name"].startswith("mapfish/")
        ),
    )
    # Get the string we used in the workflow to get the GitHub token to be used
    token = config.value(
        "github_token_secret",
        "${{ secrets.GOPASS_CI_GITHUB_TOKEN }}" if gopass else "${{ secrets.TOKEN }}",
    )

    # This is to implement a workaround of this issue: https://sourceforge.net/p/ruamel-yaml/tickets/480/
    has_config = False
    if os.path.exists("ci/config.yaml"):
        with open("ci/config.yaml", encoding="utf-8") as f:
            has_config = py_yaml.load(f.read(), Loader=py_yaml.SafeLoader)

    # Get the version of c2cciutils
    c2cciutils_version = version.parse("1.6.0")
    set_c2cciutils_version = False
    if os.path.exists("ci/requirements.txt"):
        with mra.Edit("ci/requirements.txt") as requirements_txt:
            requirements = [
                r
                for r in requirements_txt.data.split("\n")
                if r.startswith("c2cciutils==") or r.startswith("c2cciutils[")
            ]
            if len(requirements) == 1:
                c2cciutils_version_string = requirements[0].split("==")[1]
                if c2cciutils_version_string.endswith(".*"):
                    c2cciutils_version_string = c2cciutils_version_string[:-2]
                c2cciutils_version = version.parse(c2cciutils_version_string)
                set_c2cciutils_version = True
    c2cciutils_version_config = config.value("c2cciutils_version")
    if c2cciutils_version_config:
        if c2cciutils_version_config == "master":
            c2cciutils_version = version.parse("1.6.0")
            set_c2cciutils_version = False
        else:
            c2cciutils_version = version.parse(c2cciutils_version_config)
            set_c2cciutils_version = True

    use_python = False
    # min_python_version = ''
    # max_python_version = ''
    for pyproject_filename in (
        "pyproject.toml",
        "app/pyproject.toml",
        "api/pyproject.toml",
    ):
        if os.path.exists(pyproject_filename):
            with mra.EditTOML(pyproject_filename) as pyproject:
                use_python = "project" in pyproject or "build-system" in pyproject
                # min_python_version = pyproject.get("tool", {}).get("poetry", {}).get("dependencies", {}).get("python", "")
                # match = re.match(r"^>=(\d+\.\d+),<(\d+)\.(\d+)$", min_python_version)
                # if match:
                #    min_python_version = match.group(1)
                #    max_python_version_major = int(match.group(2))
                #    max_python_version_minor = int(match.group(3))
                #    if max_python_version_major == 4:
                #        max_python_version = "3.13"
                #    else:
                #        max_python_version = f"{max_python_version_major}.{max_python_version_minor-1}"

                break
    use_python = config.enabled("python", use_python)

    use_pypi = config.enabled(
        "pypi", use_python and "no-pypi" not in config.repo.get("type", [])
    )
    use_docker = config.enabled(
        "docker",
        (
            os.path.exists("Dockerfile")
            or os.path.exists("app/Dockerfile")
            or os.path.exists("api/Dockerfile")
        )
        and "no-docker" not in config.repo.get("type", []),
    )

    stabilization_branches = mra.get_stabilization_branches(config.repo)

    return TaskEnv(
        c2cciutils_version,
        set_c2cciutils_version,
        use_python,
        # min_python_version,
        # max_python_version,
        use_pypi,
        use_docker,
        use_helm,
        has_config,
        config.arguments.on_stabilization_branches or len(stabilization_branches) > 0,
        config.arguments.on_stabilization_branches and len(stabilization_branches) > 0,
        stabilization_branches,
        gopass,
        token,
        config,
    )


def _ghci_updates(task_env: TaskEnv) -> None:
    if (
        task_env.use_helm
        and not os.path.exists(".github/ghci.yaml")
        and not task_env.on_stabilization_branches
    ):
        with open(".github/ghci.yaml", "w", encoding="utf-8") as ghci:
            ghci.write(
                """# yaml-language-server: $schema=https://geoservices-int.camptocamp.com/github/schema.json

profile: helm
"""
            )


def _do() -> None:
    task_env = _get_env()
    print(f"Task environment: {task_env}")

    for name, task in (
        ("create-labels", _create_labels),
        ("set-schema-config", _set_schema_config),
        ("update-changelog-workflow", _update_changelog_workflow),
        ("update-clean-workflow", _update_clean_workflow),
        (
            "update-dependency-auto-review-workflow",
            _update_pull_request_automation_workflow,
        ),
        ("update-pull-request-checks-workflow", _update_pull_request_checks_workflow),
        ("update-backport-workflow", _update_backport_workflow),
        ("update-main-workflow", _update_main_workflow),
        ("update-ghci", _ghci_updates),
    ):
        if task_env.config.enabled(name, True):
            task(task_env)
    if task_env.on_stabilization_branches:
        for file_ in (
            ".github/workflows/delete-old-workflow-run.yaml",
            ".github/workflows/delete-old-workflows-run.yaml",
            ".github/renovate.json5",
        ):
            if os.path.exists(file_):
                os.remove(file_)
        for file_ in glob.glob(".github/workflows/audit*.yaml"):
            os.remove(file_)
        for file_ in glob.glob(".github/workflows/rebuild*.yaml"):
            os.remove(file_)

        if not os.path.exists("ci/config.yaml"):
            with open("ci/config.yaml", "w", encoding="utf-8") as config:
                config.write("{}")

        with mra.EditYAML("ci/config.yaml") as config:
            if config.get("checks") is not False:
                # config.setdefault("checks", {})["codespell"] = False
                if (
                    task_env.c2cciutils_version.major == 1
                    and task_env.c2cciutils_version.minor <= 3
                ):
                    config.setdefault("checks", {})["required_workflows"] = False
    else:
        for name, task in (
            # ("upgrade-ubuntu", _upgrade_ubuntu),
            ("update-audit-workflow", _update_audit_workflow),
            (
                "update-delete-old-workflow-run-workflow",
                _update_delete_old_workflows_run_workflow,
            ),
            ("update-pyproject-toml", _update_pyproject_toml),
            ("update-prospector-config", _update_prospector_config),
            # ("update-python-version", _update_python_version),
            ("update-renovate-config", _update_renovate_config),
            ("update-config", _update_config),
            ("update-pre-commit-config", _update_pre_commit_config),
            ("remove-docker-compose-version", _remove_docker_compose_version),
            ("use-tag-publish", _use_tag_publish),
        ):
            if task_env.config.enabled(name, True):
                task(task_env)


if __name__ == "__main__":
    # edit the file /home/sbrunner/workspace/docker-vim/.github/workflows/changelog.yaml
    # with mra.EditYAML("/home/sbrunner/workspace/docker-vim/.github/workflows/audit.yaml") as e:
    #    _canonicalize_workflow(e)
    # with mra.EditYAML("/home/sbrunner/workspace/docker-vim/.github/workflows/changelog.yaml") as e:
    #    _canonicalize_workflow(e)
    # exit(0)

    os.environ["IGNORE_CONFIG_ERROR"] = "true"

    mra.main(
        _do,
        # pull_request_on_stabilization_branches
        # pull_request_title
        # pull_request_body
        # branch
        # pull_request_branch_prefix
        config={
            "branch": "ci-upgrade",
            "pull_request_branch_prefix": "ci-upgrade-",
            "pull_request_title": "CI updates",
            "pull_request_body": "This is done by the automated script named "
            + os.path.basename(__file__),
        },
        description="Update the repository for the CI evolutions",
    )
