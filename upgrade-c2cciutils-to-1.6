#!/usr/bin/env python3

import os
import re
import subprocess

import multi_repo_automation as mra
import ruamel.yaml.comments

# if os.path.exists(".github/renovate.json5"):
# if mra.run(["grep", "text", ".github/renovate.json5"], exit_on_error=False).returncode != 0: # not found
# if mra.git_grep(r"\<text\>"]): # found
# if mra.run(["git", "ls-files", "**/*.txt"], stdout=subprocess.PIPE).stdout.strip() != b"": # found
# mra.edit("file")
# input()


# TODO remove the checks in the ci config
def _prototype() -> None:
    if os.path.exists("ci/config.yaml"):
        with mra.EditYAML("ci/config.yaml") as config:
            if "checks" in config:
                del config["checks"]

    if os.path.exists("Dockerfile"):
        if not os.path.exists("ci/dpkg-versions.yaml"):
            with mra.EditYaml("ci/dpkg-versions.yaml") as edit:
                edit.data = "{}"

        if os.path.exists(".github/renovate.json5"):
            with mra.Edit(".github/renovate.json5") as renovate_config:
                renovate_config.data = re.sub(
                    r"^ci/dpkg-versions.yaml$",
                    r"^ci/dpkg-versions\\.yaml$",
                    renovate_config.data,
                )
            with mra.EditRenovateConfig() as renovate_config:
                renovate_config.add_package_rule(
                    {
                        "fileMatch": [r"^ci/dpkg-versions\\.yaml$"],
                        "matchStrings": [
                            r" *(?<depName>[^'\s]+): '?(?<currentValue>[^'\s/]*[0-9][^'\s/]*)'?"
                        ],
                        "datasourceTemplate": "repology",
                        "versioningTemplate": "loose",
                    },
                    r"^ci/dpkg-versions\\.yaml$",
                )


def _do() -> None:
    repo = mra.get_repo_config()

    mra.gh(
        "label",
        "create",
        "--force",
        "dependencies",
        "--color=0075ca",
        "--description=Update the dependencies",
    )
    if "pull-request-welcome" not in repo.get("types", []):
        mra.gh(
            "label",
            "create",
            "--force",
            "pull request welcome",
            "--color=6622BB",
            "--description=A pull request is welcome to fix this issue",
        )

    for workflow_file in mra.run(
        ["git", "ls-files", ".github/workflows/*.yaml"], stdout=subprocess.PIPE
    ).stdout.split("\n"):
        if workflow_file:
            with mra.EditYAML(workflow_file) as yaml:
                for job in yaml["jobs"].values():
                    if job.get("runs-on", "").startswith("ubuntu-"):
                        job["runs-on"] = "ubuntu-22.04"

    gopass = "no-gopass" not in repo.get("types", [])
    token = "${{ secrets.GOPASS_CI_GITHUB_TOKEN }}" if gopass else "${{ secrets.TOKEN }}"
    if os.path.exists(".github/workflows/audit.yaml"):
        with mra.EditYAML(".github/workflows/audit.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                        step.setdefault("with", {})["token"] = token
                    if "c2cciutils-audit" in step.get("run", ""):
                        if "debug" in step["name"]:
                            step["name"] = "Audit Snyk debug"
                        else:
                            step["name"] = "Audit"
                        if not gopass:
                            step.setdefault("env").update(
                                {
                                    "GITHUB_TOKEN": token,
                                    "SNYK_TOKEN": "${{ secrets.SNYK_TOKEN }}",
                                }
                            )

    if os.path.exists(".github/workflows/changelog.yaml"):
        with mra.EditYAML(".github/workflows/changelog.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("name", "") == "Create release":
                        step.setdefault("env", {})["GH_TOKEN"] = token
                    if step.get("name", "") == "Generate changelog":
                        step.setdefault("env", {})["AEON_AUTOMATION_GH_TOKEN"] = token

    if os.path.exists(".github/workflows/clean.yaml"):
        with mra.EditYAML(".github/workflows/clean.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if "c2cciutils-clean" in step.get("run", ""):
                        step["name"] = "Clean Docker hub tags"
                        if not gopass:
                            step.setdefault("env", {}).update(
                                {
                                    "DOCKERHUB_PASSWORD": "${{ secrets.DOCKER_PASSWORD }}",
                                    "DOCKERHUB_USERNAME": "${{ secrets.DOCKER_USERNAME }}",
                                }
                            )

    if os.path.exists(".github/workflows/delete-old-workflow-run.yaml"):
        with mra.EditYAML(".github/workflows/delete-old-workflow-run.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("uses", "").startswith("MajorScruffy/delete-old-workflow-runs"):
                        step["uses"] = "MajorScruffy/delete-old-workflow-runs@v0.3.0"
                        step["name"] = "Delete old workflow runs"
                        step.setdefault("env", {})["GITHUB_TOKEN"] = token

    if os.path.exists(".github/workflows/dependabot-auto-merge.yaml"):
        mra.run(
            [
                "git",
                "mv",
                ".github/workflows/dependabot-auto-merge.yaml",
                ".github/workflows/dependency-update-review.yaml",
            ]
        )
    if os.path.exists(".github/workflows/dependency-update-review.yaml"):
        with mra.EditYAML(".github/workflows/dependency-update-review.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("uses", "").startswith("golfzaptw/action-auto-reviews-from-branches"):
                        step["uses"] = "golfzaptw/action-auto-reviews-from-branches@1.2.3"
                        step["name"] = "Auto reviews updates"
                        step.setdefault("with", {}).update({"GITHUB_TOKEN": token, "AUTHOR": "renovate[bot]"})

    if os.path.exists(".github/workflows/pr-checks.yaml"):
        with mra.EditYAML(".github/workflows/pr-checks.yaml") as yaml:
            if "attrs" not in yaml["jobs"]["build"]["steps"][0].get("run", ""):
                yaml["jobs"]["build"]["steps"].insert(
                    0,
                    {
                        "run": "pip install --upgrade attrs",
                    },
                )
            else:
                yaml["jobs"]["build"]["steps"][0]["run"] = "pip install --upgrade attrs"

            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("run", "") == "c2cciutils-pull-request-checks":
                        step["name"] = "Check pull request"
                        step.setdefault("env", {}).update(
                            {
                                "GITHUB_EVENT": "${{ toJson(github) }}",
                                "GITHUB_TOKEN": token,
                            }
                        )

    if os.path.exists(".github/workflows/backport.yaml"):
        with mra.EditYAML(".github/workflows/backport.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("uses", "") == "camptocamp/backport-action@master":
                        step.setdefault("with", {})["token"] = token

    if os.path.exists(".github/workflows/rebuild.yaml"):
        with mra.EditYAML(".github/workflows/rebuild.yaml") as yaml:
            for job in yaml["jobs"].values():
                for step in job["steps"]:
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("run", "") == "c2cciutils-checks":
                        if not gopass:
                            step.setdefault("env", {})["SNYK_TOKEN"] = "${{ secrets.SNYK_TOKEN }}"  # nosec
                    if "c2cciutils-publish" in step.get("run", ""):
                        if not gopass:
                            step.setdefault("env", {}).update(
                                {"GITHUB_TOKEN": token, "SNYK_TOKEN": "${{ secrets.SNYK_TOKEN }}"}
                            )

    if os.path.exists(".github/workflows/main.yaml"):
        with mra.EditYAML(".github/workflows/main.yaml") as yaml:
            env = yaml.setdefault("env", {})
            if "HAS_SECRETS" not in env:
                env["HAS_SECRETS"] = "${{ secrets.HAS_SECRETS }}"

                if hasattr(env, "ca"):
                    env.ca.items.clear()
                    env.ca.items["HAS_SECRETS"] = [
                        None,
                        None,
                        ruamel.yaml.CommentToken("\n\n", ruamel.yaml.error.CommentMark(0), None),
                        None,
                    ]

            for job in yaml["jobs"].values():
                has_pip_login = False
                has_docker_login = False
                publish_index = -1

                for index, step in enumerate(job["steps"]):
                    if step.get("uses", "").startswith("actions/checkout"):
                        step["uses"] = "actions/checkout@v3"
                    if step.get("run", "") == "c2cciutils-checks":
                        if not gopass:
                            env = step.setdefault("env", {})
                            env["SNYK_TOKEN"] = "${{ secrets.SNYK_TOKEN }}"  # nosec

                    if "docker login" in step.get("run", ""):
                        has_docker_login = True
                    if ".pypirc" in step.get("run", ""):
                        has_pip_login = True
                        if step.get("name", "") == "Init pypi":
                            step["run"] = ruamel.yaml.scalarstring.LiteralScalarString(
                                """echo "[pypi]" > ~/.pypirc
echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc"""
                            )

                    if "c2cciutils-publish" in step.get("run", ""):
                        publish_index = index
                        if not gopass:
                            step.setdefault("env", {}).update(
                                {"GITHUB_TOKEN": token, "SNYK_TOKEN": "${{ secrets.SNYK_TOKEN }}"}
                            )

                if (
                    not has_pip_login
                    and not gopass
                    and os.path.exists("pyproject.toml")
                    and "no-pypi" not in repo.get("type", [])
                    and publish_index >= 0
                ):
                    with mra.EditTOML("pyproject.toml") as pyproject:
                        is_python = "project" in pyproject.data or "build-system" in pyproject.data

                    if is_python:
                        job["steps"] = (
                            job["steps"][:publish_index]
                            + [
                                {
                                    "name": "Init pypi",
                                    "run": ruamel.yaml.scalarstring.LiteralScalarString(
                                        """echo "[pypi]" > ~/.pypirc
echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc"""
                                    ),
                                }
                            ]
                            + job["steps"][publish_index:]
                        )
                if (
                    not has_docker_login
                    and not gopass
                    and os.path.exists("Dockerfile")
                    and "no-docker" not in repo.get("type", [])
                    and publish_index >= 0
                ):
                    job["steps"] = (
                        job["steps"][:publish_index]
                        + [
                            {
                                "run": "docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}"
                            }
                        ]
                        + job["steps"][publish_index:]
                    )

    if os.path.exists(".github/renovate.json5"):
        with mra.Edit(".github/renovate.json5") as renovate_config:
            renovate_config.data = re.sub(
                "schedule: '.*'", "schedule: 'after 5pm on the first day of the month'", renovate_config.data
            )

    if os.path.exists("ci/config.yaml"):
        with mra.Edit("ci/config.yaml") as ci_config:
            data = ci_config.data.split("\n")
            if ci_config.data.startswith(
                "# yaml-language-server: $schema=https://raw.githubusercontent.com/camptocamp/c2cciutils"
            ):
                data = data[1:]

            while data and not data[0].strip():
                data = data[1:]

            version_minor = "1.6"
            if os.path.exists("ci/requirements.txt"):
                with mra.Edit("ci/requirements.txt") as requirements_txt:
                    requirement = [
                        r
                        for r in requirements_txt.data.split("\n")
                        if r.startswith("c2cciutils==") or r.startswith("c2cciutils[")
                    ]
                    if len(requirement) == 1:
                        version = requirement[0].split("==")[1]
                        version_split = version.split(".")
                        version_minor = ".".join(version_split[:2]) if len(version_split) > 2 else version

            data = [
                "# yaml-language-server: $schema=https://raw.githubusercontent.com/camptocamp/"
                f"c2cciutils/{version_minor}/c2cciutils/schema.json",
                "",
                *data,
            ]

            ci_config.data = "\n".join(data)

    if os.path.exists(".pre-commit-config.yaml"):
        with mra.EditPreCommitConfig() as pre_commit_config:
            pre_commit_config.add_repo("https://github.com/sbrunner/jsonschema-validator")
            pre_commit_config.add_hook(
                "https://github.com/sbrunner/jsonschema-validator",
                {
                    "id": "jsonschema-validator",
                    "files": pre_commit_config.create_files_regex(["ci/config\\.yaml"]),
                },
                True,
            )

    if os.path.exists(".github/renovate.json5"):
        with mra.EditRenovateConfig() as renovate_config:
            renovate_config.add_regex_manager(
                {
                    "fileMatch": ["^ci/config\\\\.yaml$"],
                    "matchStrings": [
                        r".*https://raw\\.githubusercontent\\.com/(?<depName>[^\\s]+)/(?<currentValue>[0-9\\.]+)/.*",
                    ],
                    "datasourceTemplate": "github-tags",
                },
                r"https://raw\\.githubusercontent\\.com/(?<depName>[^\\s]+)/(?<currentValue>[0-9\\.]+)",
            )


if __name__ == "__main__":
    mra.main(
        _do,
        # pull_request_on_stabilization_branches
        # pull_request_title
        # pull_request_body
        # branch
        # pull_request_branch_prefix
        config={
            "branch": "fix-repo",
            "pull_request_title": "Update to c2cciutils version 1.6",
            "pull_request_body": "This is done by the automated script named " + __file__,
        },
        description="Update the repository for c2cciutils version 1.6, the will also fix the errors he found",
    )
