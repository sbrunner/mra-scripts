#!/usr/bin/env python3

import os

import multi_repo_automation as mra

# if os.path.exists(".github/renovate.json5"):
# if mra.run(["grep", "text", ".github/renovate.json5"], exit_on_error=False).returncode != 0: # not found
# if mra.git_grep(r"\<text\>"]): # found
# if mra.run(["git", "ls-files", "**/*.txt"], stdout=subprocess.PIPE).stdout.strip() != b"": # found
# mra.edit("file")
# input()


def _do() -> None:
    if os.path.exists("Dockerfile"):
        with mra.Edit("ci/dpkg-versions.yaml") as edit:
            edit.content = "{}" if not edit.content else edit.content

        print(
            """You should add in your Renovate configuration
    {
      fileMatch: ['^ci/dpkg-versions.yaml$'],
      matchStrings: [" *(?<depName>[^'\\s]+): '?(?<currentValue>[^'\\s/]*[0-9][^'\\s/]*)'?"],
      datasourceTemplate: 'repology',
      versioningTemplate: 'loose',
    },
in your regexManagers and:
    /** Update dpkg versions at any time */
    {
      matchPaths: ['ci/dpkg-versions.yaml'],
      schedule: ['at any time'],
      groupName: 'dpkg',
      automerge: true,
    },
in your packageRules.

You should disable the rebuild on master branch in your GitHub workflow configuration.
"""
        )
        mra.edit([".github/workflows/rebuild.yaml", ".github/renovate.json5"])


if __name__ == "__main__":
    mra.main(
        _do,
        # pull_request_on_stabilization_branches
        # pull_request_title
        # pull_request_body
        # branch
        # pull_request_branch_prefix
        config={
            "branch": "rebuild-to-renovate",
            "pull_request_title": "Replace daily rebuild by Renovate update",
            "pull_request_body": "",
        },
    )
